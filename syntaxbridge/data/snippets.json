{
  "loops": {
    "javascript": "for (let i = 0; i < 10; i++) {\n    console.log(i);\n}",
    "python": "for i in range(10):\n    print(i)",
    "java": "for (int i = 0; i < 10; i++) {\n    System.out.println(i);\n}",
    "c": "for (int i = 0; i < 10; i++) {\n    printf(\"%d\\n\", i);\n}",
    "cpp": "for (int i = 0; i < 10; i++) {\n    cout << i << endl;\n}",
    "csharp": "for (int i = 0; i < 10; i++) {\n    Console.WriteLine(i);\n}",
    "php": "for ($i = 0; $i < 10; $i++) {\n    echo $i;\n}",
    "ruby": "10.times do |i|\n    puts i\nend",
    "go": "for i := 0; i < 10; i++ {\n    fmt.Println(i)\n}",
    "rust": "for i in 0..10 {\n    println!(\"{}\", i);\n}",
    "swift": "for i in 0...10 {\n    print(i)\n}",
    "kotlin": "for (i in 0..10) {\n    println(i)\n}"
  },
  "if_else": {
    "javascript": "if (a > b) {\n    console.log('a is greater than b');\n} else {\n    console.log('b is greater than a');\n}",
    "python": "if a > b:\n    print('a is greater than b')\nelse:\n    print('b is greater than a')",
    "java": "if (a > b) {\n    System.out.println('a is greater than b');\n} else {\n    System.out.println('b is greater than a');\n}",
    "c": "if (a > b) {\n    printf(\"a is greater than b\\n\");\n} else {\n    printf(\"b is greater than a\\n\");\n}",
    "cpp": "if (a > b) {\n    cout << \"a is greater than b\" << endl;\n} else {\n    cout << \"b is greater than a\" << endl;\n}",
    "csharp": "if (a > b) {\n    Console.WriteLine(\"a is greater than b\");\n} else {\n    Console.WriteLine(\"b is greater than a\");\n}",
    "php": "if ($a > $b) {\n    echo 'a is greater than b';\n} else {\n    echo 'b is greater than a';\n}",
    "ruby": "if a > b\n    puts 'a is greater than b'\nelse\n    puts 'b is greater than a'\nend",
    "go": "if a > b {\n    fmt.Println(\"a is greater than b\")\n} else {\n    fmt.Println(\"b is greater than a\")\n}",
    "rust": "if a > b {\n    println!(\"a is greater than b\")\n} else {\n    println!(\"b is greater than a\")\n}",
    "swift": "if a > b {\n    print(\"a is greater than b\")\n} else {\n    print(\"b is greater than a\")\n}",
    "kotlin": "if (a > b) {\n    println(\"a is greater than b\")\n} else {\n    println(\"b is greater than a\")\n}"
  },
  "variable_declaration": {
    "javascript": "let a = 10;",
    "python": "a = 10",
    "java": "int a = 10;",
    "c": "int a = 10;",
    "cpp": "int a = 10;",
    "csharp": "int a = 10;",
    "php": "$a = 10;",
    "ruby": "a = 10",
    "go": "a = 10",
    "rust": "a = 10",
    "swift": "a = 10",
    "kotlin": "val a = 10"
  },
  "function_declaration": {
    "javascript": "function add(a, b) {\n    return a + b;\n}",
    "python": "def add(a, b):\n    return a + b",
    "java": "public static int add(int a, int b) {\n    return a + b;\n}",
    "c": "int add(int a, int b) {\n    return a + b;\n}",
    "cpp": "int add(int a, int b) {\n    return a + b;\n}",
    "csharp": "public static int Add(int a, int b) {\n    return a + b;\n}",
    "php": "function add($a, $b) {\n    return $a + $b;\n}",
    "ruby": "def add(a, b)\n    a + b\nend",
    "go": "func add(a, b int) int {\n    return a + b\n}",
    "rust": "fn add(a, b) {\n    return a + b;\n}",
    "swift": "func add(a, b) {\n    return a + b;\n}",
    "kotlin": "fun add(a, b) {\n    return a + b;\n}"
  },
  "imports & Exports": {
    "javascript": "import { add } from './add.js';",
    "python": "from add import add",
    "java": "import static add.add;",
    "c": "import add;",
    "cpp": "import add;",
    "csharp": "using static add;",
    "php": "require_once 'add.php';",
    "ruby": "require_relative 'add.rb';",
    "go": "import add",
    "rust": "mod add;",
    "swift": "import add",
    "kotlin": "import add"
  },
  "Classes": {
    "javascript": "class Person {\n    constructor(name) {\n        this.name = name;\n    }\n}",
    "python": "class Person:\n    def __init__(self, name):\n        self.name = name\n",
    "java": "public class Person {\n    private String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n}",
    "c": "struct Person {\n    char *name;\n};",
    "cpp": "class Person {\n    private:\n    std::string name;\n\n    public:\n    Person(std::string name) {\n        this->name = name;\n    }\n}",
    "csharp": "public class Person {\n    private string name;\n\n    public Person(string name) {\n        this.name = name;\n    }\n}",
    "php": "class Person {\n    private $name;\n\n    public function __construct($name) {\n        $this->name = $name;\n    }\n}",
    "ruby": "class Person\n    def initialize(name)\n        @name = name\n    end\nend",
    "go": "type Person struct {\n    name string\n}\n\nfunc NewPerson(name string) *Person {\n    return &Person{name: name}\n}",
    "rust": "struct Person {\n    name: String\n}\n\nimpl Person {\n    fn new(name: String) -> Person {\n        Person { name }\n    }\n}",
    "swift": "class Person {\n    private var name: String\n\n    init(name: String) {\n        self._name = name\n    }\n}",
    "kotlin": "class Person {\n    private val name: String\n\n    constructor(name: String) {\n        this.name = name\n    }\n}"
  }
}
