{
  "loops": {
    "examples": {
      "javascript": [
        {
          "code": "for (let i = 0; i < 10; i++) {\n    console.log(i);\n}",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "let i = 0;\nwhile (i < 10) {\n    console.log(i);\n    i++;\n}",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "python": [
        {
          "code": "for i in range(10):\n    print(i)",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "i = 0\nwhile i < 10:\n    print(i)\n    i += 1",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "java": [
        {
          "code": "for (int i = 0; i < 10; i++) {\n    System.out.println(i);\n}",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "int i = 0;\nwhile (i < 10) {\n    System.out.println(i);\n    i++;\n}",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "c": [
        {
          "code": "for (int i = 0; i < 10; i++) {\n    printf(\"%d\\n\", i);\n}",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "int i = 0;\nwhile (i < 10) {\n    printf(\"%d\\n\", i);\n    i++;\n}",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "cpp": [
        {
          "code": "for (int i = 0; i < 10; i++) {\n    cout << i << endl;\n}",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "int i = 0;\nwhile (i < 10) {\n    cout << i << endl;\n    i++;\n}",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "csharp": [
        {
          "code": "for (int i = 0; i < 10; i++) {\n    Console.WriteLine(i);\n}",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "int i = 0;\nwhile (i < 10) {\n    Console.WriteLine(i);\n    i++;\n}",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "php": [
        {
          "code": "for ($i = 0; $i < 10; $i++) {\n    echo $i;\n}",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "$i = 0;\nwhile ($i < 10) {\n    echo $i;\n    $i++;\n}",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "ruby": [
        {
          "code": "10.times do |i|\n    puts i\nend",
          "description": "A simple loop that prints numbers from 0 to 9."
        },
        {
          "code": "i = 0\nwhile i < 10\n    puts i\n    i += 1\nend",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "go": [
        {
          "code": "for i := 0; i < 10; i++ {\n    fmt.Println(i)\n}",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "i := 0\nfor i < 10 {\n    fmt.Println(i)\n    i++\n}",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "rust": [
        {
          "code": "for i in 0..10 {\n    println!(\"{}\", i);\n}",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "let mut i = 0;\nwhile i < 10 {\n    println!(\"{}\", i);\n    i += 1;\n}",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "swift": [
        {
          "code": "for i in 0...10 {\n    print(i)\n}",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "var i = 0\nwhile i < 10 {\n    print(i)\n    i += 1\n}",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ],
      "kotlin": [
        {
          "code": "for (i in 0..10) {\n    println(i)\n}",
          "description": "A simple for loop that prints numbers from 0 to 9."
        },
        {
          "code": "var i = 0\nwhile (i < 10) {\n    println(i)\n    i++\n}",
          "description": "A while loop that prints numbers from 0 to 9."
        }
      ]
    }
  },
  "if_else": {
    "examples": {
      "javascript": [
        {
          "code": "if (a > b) {\n    console.log('a is greater than b');\n} else {\n    console.log('b is greater than a');\n}",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if (score >= 90) {\n    grade = 'A';\n} else if (score >= 80) {\n    grade = 'B';\n} else {\n    grade = 'C';\n}",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "python": [
        {
          "code": "if a > b:\n    print('a is greater than b')\nelse:\n    print('b is greater than a')",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if score >= 90:\n    grade = 'A'\nelif score >= 80:\n    grade = 'B'\nelse:\n    grade = 'C'",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "java": [
        {
          "code": "if (a > b) {\n    System.out.println('a is greater than b');\n} else {\n    System.out.println('b is greater than a');\n}",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if (score >= 90) {\n    grade = 'A';\n} else if (score >= 80) {\n    grade = 'B';\n} else {\n    grade = 'C';\n}",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "c": [
        {
          "code": "if (a > b) {\n    printf(\"a is greater than b\\n\");\n} else {\n    printf(\"b is greater than a\\n\");\n}",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if (score >= 90) {\n    grade = 'A';\n} else if (score >= 80) {\n    grade = 'B';\n} else {\n    grade = 'C';\n}",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "cpp": [
        {
          "code": "if (a > b) {\n    cout << \"a is greater than b\" << endl;\n} else {\n    cout << \"b is greater than a\" << endl;\n}",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if (score >= 90) {\n    grade = 'A';\n} else if (score >= 80) {\n    grade = 'B';\n} else {\n    grade = 'C';\n}",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "csharp": [
        {
          "code": "if (a > b) {\n    Console.WriteLine(\"a is greater than b\");\n} else {\n    Console.WriteLine(\"b is greater than a\");\n}",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if (score >= 90) {\n    grade = 'A';\n} else if (score >= 80) {\n    grade = 'B';\n} else {\n    grade = 'C';\n}",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "php": [
        {
          "code": "if ($a > $b) {\n    echo 'a is greater than b';\n} else {\n    echo 'b is greater than a';\n}",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if ($score >= 90) {\n    $grade = 'A';\n} else if ($score >= 80) {\n    $grade = 'B';\n} else {\n    $grade = 'C';\n}",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "ruby": [
        {
          "code": "if a > b\n    puts 'a is greater than b'\nelse\n    puts 'b is greater than a'\nend",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if score >= 90\n    grade = 'A'\nelsif score >= 80\n    grade = 'B'\nelse\n    grade = 'C'\nend",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "go": [
        {
          "code": "if a > b {\n    fmt.Println(\"a is greater than b\")\n} else {\n    fmt.Println(\"b is greater than a\")\n}",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if score >= 90 {\n    grade = 'A'\n} else if score >= 80 {\n    grade = 'B'\n} else {\n    grade = 'C'\n}",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "rust": [
        {
          "code": "if a > b {\n    println!(\"a is greater than b\")\n} else {\n    println!(\"b is greater than a\")\n}",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if score >= 90 {\n    grade = 'A'\n} else if score >= 80 {\n    grade = 'B'\n} else {\n    grade = 'C'\n}",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "swift": [
        {
          "code": "if a > b {\n    print(\"a is greater than b\")\n} else {\n    print(\"b is greater than a\")\n}",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if score >= 90 {\n    grade = 'A'\n} else if score >= 80 {\n    grade = 'B'\n} else {\n    grade = 'C'\n}",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ],
      "kotlin": [
        {
          "code": "if (a > b) {\n    println(\"a is greater than b\")\n} else {\n    println(\"b is greater than a\")\n}",
          "description": "Simple if/else statement to compare two variables."
        },
        {
          "code": "if (score >= 90) {\n    grade = 'A'\n} else if (score >= 80) {\n    grade = 'B'\n} else {\n    grade = 'C'\n}",
          "description": "If/else if/else statement to assign grades based on scores."
        }
      ]
    }
  },
  "variable_declaration": {
    "examples": {
      "javascript": [
        {
          "code": "let a = 10;",
          "description": "Declare a variable 'a' with the value 10."
        },
        {
          "code": "const b = 'Hello';",
          "description": "Declare a constant 'b' with the value 'Hello'."
        }
      ],
      "python": [
        {
          "code": "a = 10",
          "description": "Declare a variable 'a' with the value 10."
        },
        {
          "code": "b = 'Hello'",
          "description": "Declare a variable 'b' with the value 'Hello'."
        }
      ],
      "java": [
        {
          "code": "int a = 10;",
          "description": "Declare an integer variable 'a' with the value 10."
        },
        {
          "code": "String b = 'Hello';",
          "description": "Declare a string variable 'b' with the value 'Hello'."
        }
      ],
      "c": [
        {
          "code": "int a = 10;",
          "description": "Declare an integer variable 'a' with the value 10."
        },
        {
          "code": "char* b = 'Hello';",
          "description": "Declare a string variable 'b' with the value 'Hello'."
        }
      ],
      "cpp": [
        {
          "code": "int a = 10;",
          "description": "Declare an integer variable 'a' with the value 10."
        },
        {
          "code": "std::string b = 'Hello';",
          "description": "Declare a string variable 'b' with the value 'Hello'."
        }
      ],
      "csharp": [
        {
          "code": "int a = 10;",
          "description": "Declare an integer variable 'a' with the value 10."
        },
        {
          "code": "string b = 'Hello';",
          "description": "Declare a string variable 'b' with the value 'Hello'."
        }
      ],
      "php": [
        {
          "code": "$a = 10;",
          "description": "Declare a variable 'a' with the value 10."
        },
        {
          "code": "$b = 'Hello';",
          "description": "Declare a variable 'b' with the value 'Hello'."
        }
      ],
      "ruby": [
        {
          "code": "a = 10",
          "description": "Declare a variable 'a' with the value 10."
        },
        {
          "code": "b = 'Hello'",
          "description": "Declare a variable 'b' with the value 'Hello'."
        }
      ],
      "go": [
        {
          "code": "a := 10",
          "description": "Declare a variable 'a' with the value 10."
        },
        {
          "code": "b := 'Hello'",
          "description": "Declare a variable 'b' with the value 'Hello'."
        }
      ],
      "rust": [
        {
          "code": "let a = 10;",
          "description": "Declare a variable 'a' with the value 10."
        },
        {
          "code": "let b = 'Hello';",
          "description": "Declare a variable 'b' with the value 'Hello'."
        }
      ],
      "swift": [
        {
          "code": "var a = 10",
          "description": "Declare a variable 'a' with the value 10."
        },
        {
          "code": "let b = 'Hello'",
          "description": "Declare a constant 'b' with the value 'Hello'."
        }
      ],
      "kotlin": [
        {
          "code": "var a = 10",
          "description": "Declare a variable 'a' with the value 10."
        },
        {
          "code": "val b = 'Hello'",
          "description": "Declare a constant 'b' with the value 'Hello'."
        }
      ]
    }
  },
  "functions": {
    "examples": {
      "javascript": [
        {
          "code": "function add(a, b) {\n    return a + b;\n}",
          "description": "A function that adds two numbers."
        },
        {
          "code": "const multiply = (a, b) => a * b;",
          "description": "A function that multiplies two numbers using arrow syntax."
        }
      ],
      "python": [
        {
          "code": "def add(a, b):\n    return a + b",
          "description": "A function that adds two numbers."
        },
        {
          "code": "def multiply(a, b):\n    return a * b",
          "description": "A function that multiplies two numbers."
        }
      ],
      "java": [
        {
          "code": "public static int add(int a, int b) {\n    return a + b;\n}",
          "description": "A function that adds two numbers."
        },
        {
          "code": "public static int multiply(int a, int b) {\n    return a * b;\n}",
          "description": "A function that multiplies two numbers."
        }
      ],
      "c": [
        {
          "code": "int add(int a, int b) {\n    return a + b;\n}",
          "description": "A function that adds two numbers."
        },
        {
          "code": "int multiply(int a, int b) {\n    return a * b;\n}",
          "description": "A function that multiplies two numbers."
        }
      ],
      "cpp": [
        {
          "code": "int add(int a, int b) {\n    return a + b;\n}",
          "description": "A function that adds two numbers."
        },
        {
          "code": "int multiply(int a, int b) {\n    return a * b;\n}",
          "description": "A function that multiplies two numbers."
        }
      ],
      "csharp": [
        {
          "code": "public static int Add(int a, int b) {\n    return a + b;\n}",
          "description": "A function that adds two numbers."
        },
        {
          "code": "public static int Multiply(int a, int b) {\n    return a * b;\n}",
          "description": "A function that multiplies two numbers."
        }
      ],
      "php": [
        {
          "code": "function add($a, $b) {\n    return $a + $b;\n}",
          "description": "A function that adds two numbers."
        },
        {
          "code": "function multiply($a, $b) {\n    return $a * $b;\n}",
          "description": "A function that multiplies two numbers."
        }
      ],
      "ruby": [
        {
          "code": "def add(a, b)\n    a + b\nend",
          "description": "A function that adds two numbers."
        },
        {
          "code": "def multiply(a, b)\n    a * b\nend",
          "description": "A function that multiplies two numbers."
        }
      ],
      "go": [
        {
          "code": "func add(a, b int) int {\n    return a + b\n}",
          "description": "A function that adds two numbers."
        },
        {
          "code": "func multiply(a, b int) int {\n    return a * b\n}",
          "description": "A function that multiplies two numbers."
        }
      ],
      "rust": [
        {
          "code": "fn add(a: i32, b: i32) -> i32 {\n    a + b\n}",
          "description": "A function that adds two numbers."
        },
        {
          "code": "fn multiply(a: i32, b: i32) -> i32 {\n    a * b\n}",
          "description": "A function that multiplies two numbers."
        }
      ],
      "swift": [
        {
          "code": "func add(a: Int, b: Int) -> Int {\n    return a + b\n}",
          "description": "A function that adds two numbers."
        },
        {
          "code": "func multiply(a: Int, b: Int) -> Int {\n    return a * b\n}",
          "description": "A function that multiplies two numbers."
        }
      ],
      "kotlin": [
        {
          "code": "fun add(a: Int, b: Int): Int {\n    return a + b\n}",
          "description": "A function that adds two numbers."
        },
        {
          "code": "fun multiply(a: Int, b: Int): Int {\n    return a * b\n}",
          "description": "A function that multiplies two numbers."
        }
      ]
    }
  },
  "imports_exports": {
    "examples": {
      "javascript": [
        {
          "code": "import { add } from './add.js';",
          "description": "Import the 'add' function from another module."
        },
        {
          "code": "export function add(a, b) {\n    return a + b;\n}",
          "description": "Export the 'add' function for use in other modules."
        }
      ],
      "python": [
        {
          "code": "from add import add",
          "description": "Import the 'add' function from another module."
        },
        {
          "code": "def add(a, b):\n    return a + b",
          "description": "Define and export the 'add' function."
        }
      ],
      "java": [
        {
          "code": "import static add.add;",
          "description": "Import the 'add' function from another module."
        },
        {
          "code": "public static int add(int a, int b) {\n    return a + b;\n}",
          "description": "Define and export the 'add' function."
        }
      ],
      "c": [
        {
          "code": "#include \"add.h\"",
          "description": "Import the 'add' function from another header file."
        },
        {
          "code": "int add(int a, int b) {\n    return a + b;\n}",
          "description": "Define and export the 'add' function."
        }
      ],
      "cpp": [
        {
          "code": "#include \"add.h\"",
          "description": "Import the 'add' function from another header file."
        },
        {
          "code": "int add(int a, int b) {\n    return a + b;\n}",
          "description": "Define and export the 'add' function."
        }
      ],
      "csharp": [
        {
          "code": "using static add;",
          "description": "Import the 'add' function from another namespace."
        },
        {
          "code": "public static int Add(int a, int b) {\n    return a + b;\n}",
          "description": "Define and export the 'add' function."
        }
      ],
      "php": [
        {
          "code": "require_once 'add.php';",
          "description": "Import the 'add' function from another file."
        },
        {
          "code": "function add($a, $b) {\n    return $a + $b;\n}",
          "description": "Define and export the 'add' function."
        }
      ],
      "ruby": [
        {
          "code": "require_relative 'add.rb';",
          "description": "Import the 'add' function from another file."
        },
        {
          "code": "def add(a, b)\n    a + b\nend",
          "description": "Define and export the 'add' function."
        }
      ],
      "go": [
        {
          "code": "import \"add\"",
          "description": "Import the 'add' package."
        },
        {
          "code": "func add(a, b int) int {\n    return a + b\n}",
          "description": "Define and export the 'add' function."
        }
      ],
      "rust": [
        {
          "code": "mod add;",
          "description": "Import the 'add' module."
        },
        {
          "code": "pub fn add(a: i32, b: i32) -> i32 {\n    a + b\n}",
          "description": "Define and export the 'add' function."
        }
      ],
      "swift": [
        {
          "code": "import add",
          "description": "Import the 'add' module."
        },
        {
          "code": "func add(a: Int, b: Int) -> Int {\n    return a + b\n}",
          "description": "Define and export the 'add' function."
        }
      ],
      "kotlin": [
        {
          "code": "import add",
          "description": "Import the 'add' module."
        },
        {
          "code": "fun add(a: Int, b: Int): Int {\n    return a + b\n}",
          "description": "Define and export the 'add' function."
        }
      ]
    }
  },
  "classes": {
    "examples": {
      "javascript": [
        {
          "code": "class Person {\n    constructor(name) {\n        this.name = name;\n    }\n}",
          "description": "Define a class 'Person' with a constructor."
        },
        {
          "code": "class Employee extends Person {\n    constructor(name, position) {\n        super(name);\n        this.position = position;\n    }\n}",
          "description": "Define a class 'Employee' that inherits from 'Person'."
        }
      ],
      "python": [
        {
          "code": "class Person:\n    def __init__(self, name):\n        self.name = name\n",
          "description": "Define a class 'Person' with an initializer."
        },
        {
          "code": "class Employee(Person):\n    def __init__(self, name, position):\n        super().__init__(name)\n        self.position = position\n",
          "description": "Define a class 'Employee' that inherits from 'Person'."
        }
      ],
      "java": [
        {
          "code": "public class Person {\n    private String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n}",
          "description": "Define a class 'Person' with a constructor."
        },
        {
          "code": "public class Employee extends Person {\n    private String position;\n\n    public Employee(String name, String position) {\n        super(name);\n        this.position = position;\n    }\n}",
          "description": "Define a class 'Employee' that inherits from 'Person'."
        }
      ],
      "c": [
        {
          "code": "typedef struct Person {\n    char *name;\n} Person;",
          "description": "Define a struct 'Person' with a name field."
        },
        {
          "code": "typedef struct Employee {\n    Person person;\n    char *position;\n} Employee;",
          "description": "Define a struct 'Employee' that contains a 'Person' and a position."
        }
      ],
      "cpp": [
        {
          "code": "class Person {\n    private:\n    std::string name;\n\n    public:\n    Person(std::string name) {\n        this->name = name;\n    }\n}",
          "description": "Define a class 'Person' with a constructor."
        },
        {
          "code": "class Employee : public Person {\n    private:\n    std::string position;\n\n    public:\n    Employee(std::string name, std::string position) : Person(name) {\n        this->position = position;\n    }\n}",
          "description": "Define a class 'Employee' that inherits from 'Person'."
        }
      ],
      "csharp": [
        {
          "code": "public class Person {\n    private string name;\n\n    public Person(string name) {\n        this.name = name;\n    }\n}",
          "description": "Define a class 'Person' with a constructor."
        },
        {
          "code": "public class Employee : Person {\n    private string position;\n\n    public Employee(string name, string position) : base(name) {\n        this.position = position;\n    }\n}",
          "description": "Define a class 'Employee' that inherits from 'Person'."
        }
      ],
      "php": [
        {
          "code": "class Person {\n    private $name;\n\n    public function __construct($name) {\n        $this->name = $name;\n    }\n}",
          "description": "Define a class 'Person' with a constructor."
        },
        {
          "code": "class Employee extends Person {\n    private $position;\n\n    public function __construct($name, $position) {\n        parent::__construct($name);\n        $this->position = $position;\n    }\n}",
          "description": "Define a class 'Employee' that inherits from 'Person'."
        }
      ],
      "ruby": [
        {
          "code": "class Person\n    def initialize(name)\n        @name = name\n    end\nend",
          "description": "Define a class 'Person' with an initializer."
        },
        {
          "code": "class Employee < Person\n    def initialize(name, position)\n        super(name)\n        @position = position\n    end\nend",
          "description": "Define a class 'Employee' that inherits from 'Person'."
        }
      ],
      "go": [
        {
          "code": "type Person struct {\n    name string\n}\n\nfunc NewPerson(name string) *Person {\n    return &Person{name: name}\n}",
          "description": "Define a struct 'Person' with a name field and a constructor function."
        },
        {
          "code": "type Employee struct {\n    Person\n    position string\n}\n\nfunc NewEmployee(name, position string) *Employee {\n    return &Employee{Person: Person{name: name}, position: position}\n}",
          "description": "Define a struct 'Employee' that embeds 'Person' and a position, with a constructor function."
        }
      ],
      "rust": [
        {
          "code": "struct Person {\n    name: String\n}\n\nimpl Person {\n    fn new(name: String) -> Person {\n        Person { name }\n    }\n}",
          "description": "Define a struct 'Person' with a name field and an implementation block for methods."
        },
        {
          "code": "struct Employee {\n    person: Person,\n    position: String\n}\n\nimpl Employee {\n    fn new(name: String, position: String) -> Employee {\n        Employee { person: Person::new(name), position }\n    }\n}",
          "description": "Define a struct 'Employee' that contains 'Person' and a position, with an implementation block for methods."
        }
      ],
      "swift": [
        {
          "code": "class Person {\n    private var name: String\n\n    init(name: String) {\n        self.name = name\n    }\n}",
          "description": "Define a class 'Person' with an initializer."
        },
        {
          "code": "class Employee: Person {\n    private var position: String\n\n    init(name: String, position: String) {\n        self.position = position\n        super.init(name: name)\n    }\n}",
          "description": "Define a class 'Employee' that inherits from 'Person'."
        }
      ],
      "kotlin": [
        {
          "code": "class Person {\n    private val name: String\n\n    constructor(name: String) {\n        this.name = name\n    }\n}",
          "description": "Define a class 'Person' with a constructor."
        },
        {
          "code": "class Employee(name: String, private val position: String) : Person(name) {}",
          "description": "Define a class 'Employee' that inherits from 'Person'."
        }
      ]
    }
  },
  "error_handling": {
    "examples": {
      "javascript": [
        {
          "code": "try {\n    // code that may throw an error\n    let result = riskyFunction();\n} catch (error) {\n    console.error(error);\n} finally {\n    console.log('Cleanup code');\n}",
          "description": "Using try-catch-finally for error handling."
        }
      ],
      "python": [
        {
          "code": "try:\n    result = risky_function()\nexcept Exception as e:\n    print(e)\nfinally:\n    print('Cleanup code')",
          "description": "Using try-except-finally for error handling."
        }
      ],
      "java": [
        {
          "code": "try {\n    int result = riskyFunction();\n} catch (Exception e) {\n    e.printStackTrace();\n} finally {\n    System.out.println('Cleanup code');\n}",
          "description": "Using try-catch-finally for error handling."
        }
      ],
      "c": [
        {
          "code": "#include <setjmp.h>\n\njmp_buf buf;\n\nvoid riskyFunction() {\n    if (setjmp(buf)) {\n        printf('Error occurred');\n    } else {\n        longjmp(buf, 1);\n    }\n}",
          "description": "Using setjmp and longjmp for error handling."
        }
      ],
      "cpp": [
        {
          "code": "try {\n    int result = riskyFunction();\n} catch (const std::exception& e) {\n    std::cerr << e.what() << std::endl;\n} finally {\n    std::cout << 'Cleanup code' << std::endl;\n}",
          "description": "Using try-catch for error handling."
        }
      ],
      "csharp": [
        {
          "code": "try {\n    int result = RiskyFunction();\n} catch (Exception e) {\n    Console.WriteLine(e.Message);\n} finally {\n    Console.WriteLine('Cleanup code');\n}",
          "description": "Using try-catch-finally for error handling."
        }
      ],
      "php": [
        {
          "code": "try {\n    $result = riskyFunction();\n} catch (Exception $e) {\n    echo $e->getMessage();\n} finally {\n    echo 'Cleanup code';\n}",
          "description": "Using try-catch-finally for error handling."
        }
      ],
      "ruby": [
        {
          "code": "begin\n    result = risky_function\nrescue => e\n    puts e.message\nensure\n    puts 'Cleanup code'\nend",
          "description": "Using begin-rescue-ensure for error handling."
        }
      ],
      "go": [
        {
          "code": "func riskyFunction() (result int, err error) {\n    defer func() {\n        if r := recover(); r != nil {\n            err = fmt.Errorf('riskyFunction failed: %v', r)\n        }\n    }()\n    panic('something went wrong')\n}",
          "description": "Using defer and recover for error handling."
        }
      ],
      "rust": [
        {
          "code": "fn risky_function() -> Result<i32, String> {\n    if some_condition {\n        Ok(42)\n    } else {\n        Err(String::from('Error occurred'))\n    }\n}",
          "description": "Using Result for error handling."
        }
      ],
      "swift": [
        {
          "code": "do {\n    let result = try riskyFunction()\n} catch {\n    print(error)\n} finally {\n    print('Cleanup code')\n}",
          "description": "Using do-try-catch for error handling."
        }
      ],
      "kotlin": [
        {
          "code": "try {\n    val result = riskyFunction()\n} catch (e: Exception) {\n    println(e.message)\n} finally {\n    println('Cleanup code')\n}",
          "description": "Using try-catch-finally for error handling."
        }
      ]
    }
  },
  "file_io": {
    "examples": {
      "javascript": [
        {
          "code": "const fs = require('fs');\n\nfs.writeFileSync('example.txt', 'Hello, World!');\nconst data = fs.readFileSync('example.txt', 'utf8');\nconsole.log(data);",
          "description": "Using Node.js fs module to write to and read from a file."
        },
        {
          "code": "const fs = require('fs').promises;\n\nasync function example() {\n  await fs.writeFile('example.txt', 'Hello, World!');\n  const data = await fs.readFile('example.txt', 'utf8');\n  console.log(data);\n}\nexample();",
          "description": "Using Node.js fs promises API for asynchronous file operations."
        }
      ],
      "python": [
        {
          "code": "with open('example.txt', 'w') as file:\n    file.write('Hello, World!')\n\nwith open('example.txt', 'r') as file:\n    data = file.read()\n    print(data)",
          "description": "Using the built-in open function to write to and read from a file."
        },
        {
          "code": "import os\n\nwith open('example.txt', 'w') as file:\n    file.write('Hello, World!')\n\nwith open('example.txt', 'r') as file:\n    data = file.read()\n    print(data)\n\nos.remove('example.txt')",
          "description": "Using the os module to handle file operations and delete a file."
        }
      ],
      "java": [
        {
          "code": "import java.nio.file.*;\nimport java.io.IOException;\n\npublic class FileIOExample {\n    public static void main(String[] args) {\n        try {\n            Files.writeString(Path.of('example.txt'), 'Hello, World!');\n            String data = Files.readString(Path.of('example.txt'));\n            System.out.println(data);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
          "description": "Using java.nio.file.Files to write to and read from a file."
        }
      ],
      "c": [
        {
          "code": "#include <stdio.h>\n\nint main() {\n    FILE *file = fopen('example.txt', 'w');\n    if (file) {\n        fputs('Hello, World!', file);\n        fclose(file);\n    }\n    file = fopen('example.txt', 'r');\n    if (file) {\n        char buffer[50];\n        fgets(buffer, 50, file);\n        printf('%s\\n', buffer);\n        fclose(file);\n    }\n    return 0;\n}",
          "description": "Using the standard I/O library to write to and read from a file."
        }
      ],
      "cpp": [
        {
          "code": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ofstream outfile('example.txt');\n    outfile << 'Hello, World!' << std::endl;\n    outfile.close();\n\n    std::ifstream infile('example.txt');\n    std::string data;\n    std::getline(infile, data);\n    std::cout << data << std::endl;\n    infile.close();\n    return 0;\n}",
          "description": "Using fstream to write to and read from a file."
        }
      ],
      "csharp": [
        {
          "code": "using System;\nusing System.IO;\n\nclass Program {\n    static void Main() {\n        File.WriteAllText('example.txt', 'Hello, World!');\n        string data = File.ReadAllText('example.txt');\n        Console.WriteLine(data);\n    }\n}",
          "description": "Using System.IO.File to write to and read from a file."
        }
      ],
      "php": [
        {
          "code": "file_put_contents('example.txt', 'Hello, World!');\n$data = file_get_contents('example.txt');\necho $data;",
          "description": "Using file_put_contents and file_get_contents to write to and read from a file."
        }
      ],
      "ruby": [
        {
          "code": "File.write('example.txt', 'Hello, World!')\ndata = File.read('example.txt')\nputs data",
          "description": "Using File.write and File.read to write to and read from a file."
        }
      ],
      "go": [
        {
          "code": "import (\n    'fmt'\n    'io/ioutil'\n)\n\nfunc main() {\n    ioutil.WriteFile('example.txt', []byte('Hello, World!'), 0644)\n    data, _ := ioutil.ReadFile('example.txt')\n    fmt.Println(string(data))\n}",
          "description": "Using ioutil package to write to and read from a file."
        }
      ],
      "rust": [
        {
          "code": "use std::fs;\n\nfn main() {\n    fs::write('example.txt', 'Hello, World!').expect('Unable to write file');\n    let data = fs::read_to_string('example.txt').expect('Unable to read file');\n    println!(\"{}\", data);\n}",
          "description": "Using std::fs module to write to and read from a file."
        }
      ],
      "swift": [
        {
          "code": "import Foundation\n\nlet text = 'Hello, World!'\ntry text.write(toFile: 'example.txt', atomically: true, encoding: .utf8)\nlet data = try String(contentsOfFile: 'example.txt', encoding: .utf8)\nprint(data)",
          "description": "Using Foundation framework to write to and read from a file."
        }
      ],
      "kotlin": [
        {
          "code": "import java.io.File\n\nfun main() {\n    File('example.txt').writeText('Hello, World!')\n    val data = File('example.txt').readText()\n    println(data)\n}",
          "description": "Using java.io.File to write to and read from a file."
        }
      ]
    }
  },
  "ternary_expression": {
    "examples": {
      "javascript": [
        {
          "code": "const result = condition ? 'value if true' : 'value if false';",
          "description": "Using a ternary operator to assign a value based on a condition."
        },
        {
          "code": "const age = 18;\nconst canVote = age >= 18 ? 'Yes' : 'No';",
          "description": "Using a ternary operator to determine if someone can vote based on age."
        }
      ],
      "python": [
        {
          "code": "result = 'value if true' if condition else 'value if false'",
          "description": "Using a ternary expression to assign a value based on a condition."
        },
        {
          "code": "age = 18\ncan_vote = 'Yes' if age >= 18 else 'No'",
          "description": "Using a ternary expression to determine if someone can vote based on age."
        }
      ],
      "java": [
        {
          "code": "String result = condition ? 'value if true' : 'value if false';",
          "description": "Using a ternary operator to assign a value based on a condition."
        },
        {
          "code": "int age = 18;\nString canVote = age >= 18 ? 'Yes' : 'No';",
          "description": "Using a ternary operator to determine if someone can vote based on age."
        }
      ],
      "c": [
        {
          "code": "int result = condition ? value_if_true : value_if_false;",
          "description": "Using a ternary operator to assign a value based on a condition."
        },
        {
          "code": "int age = 18;\nchar* canVote = age >= 18 ? 'Yes' : 'No';",
          "description": "Using a ternary operator to determine if someone can vote based on age."
        }
      ],
      "cpp": [
        {
          "code": "int result = condition ? value_if_true : value_if_false;",
          "description": "Using a ternary operator to assign a value based on a condition."
        },
        {
          "code": "int age = 18;\nstd::string canVote = age >= 18 ? 'Yes' : 'No';",
          "description": "Using a ternary operator to determine if someone can vote based on age."
        }
      ],
      "csharp": [
        {
          "code": "string result = condition ? 'value if true' : 'value if false';",
          "description": "Using a ternary operator to assign a value based on a condition."
        },
        {
          "code": "int age = 18;\nstring canVote = age >= 18 ? 'Yes' : 'No';",
          "description": "Using a ternary operator to determine if someone can vote based on age."
        }
      ],
      "php": [
        {
          "code": "$result = $condition ? 'value if true' : 'value if false';",
          "description": "Using a ternary operator to assign a value based on a condition."
        },
        {
          "code": "$age = 18;\n$canVote = $age >= 18 ? 'Yes' : 'No';",
          "description": "Using a ternary operator to determine if someone can vote based on age."
        }
      ],
      "ruby": [
        {
          "code": "result = condition ? 'value if true' : 'value if false'",
          "description": "Using a ternary operator to assign a value based on a condition."
        },
        {
          "code": "age = 18\ncan_vote = age >= 18 ? 'Yes' : 'No'",
          "description": "Using a ternary operator to determine if someone can vote based on age."
        }
      ],
      "go": [
        {
          "code": "result := valueIfTrue\nif condition {\n    result = valueIfFalse\n}",
          "description": "Using an if statement to assign a value based on a condition."
        },
        {
          "code": "age := 18\ncanVote := \"No\"\nif age >= 18 {\n    canVote = \"Yes\"\n}",
          "description": "Using an if statement to determine if someone can vote based on age."
        }
      ],
      "rust": [
        {
          "code": "let result = if condition { value_if_true } else { value_if_false };",
          "description": "Using an if expression to assign a value based on a condition"
        },
        {
          "code": "let age = 18;\nlet can_vote = if age >= 18 { \"Yes\" } else { \"No\" };",
          "description": "Using an if expression to determine if someone can vote based on age."
        }
      ]
    }
  }
}
